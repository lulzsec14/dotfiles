<snippet>
	<content><![CDATA[
/*
	 à©´
	Author :- Sourav
	Date & time :- $1
*/
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <math.h>
#include <bits/stdc++.h>
#include <stack>
#include <queue>
#include <list>
#include <vector>
#include <bitset>
#include <unordered_map>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

#pragma GCC optimize("Ofast")
// #pragma comment(linker, "/stack:200000000")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define int long long int
#define F first
#define S second
#define gc getchar_unlocked
#define all(x) x.begin(),x.end()
#define pb push_back
#define fo(i,n) for(int i=0;i<n;++i)
#define Fo(i,k,n) for(int i=k;k<n?i<n:i>n;k<n?i+=1:i-=1)
#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)
#define si(x) scanf("%d",&x)
#define sl(x) scanf("%lld",&x)
#define ss(s) scanf("%s",s)
#define pri(x) printf("%d\n",x)
#define prl(x) printf("%lld\n",x)
#define prs(s) printf("%s\n",s)
#define mp make_pair
#define pii pair<int,int>
#define vi vector<int>
#define mii map<int,int>
#define sortall(x) sort(all(x))
#define pqb priority_queue<int>
#define pqs priority_queue<int,vi,greater<int> >
#define ub upper_bound
#define lb lower_bound
#define setbits(x) __builtin_popcountll(x)
#define zrobits(x) __builtin_ctzll(x)
#define mod 1000000007
#define inf 1e18
#define ps(x,y) fixed<<setprecision(y)<<x
#define mk(arr,n,type) type *arr=new type[n];
#define w(x) int x; cin>>x; while(x--)
#define endl "\n"
#define LSOne(Z) (Z & (-Z))
#define isBitSet(Z, i) ((Z >> i) & 1)
#define PI 3.1415926535897932384626

mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());
int rng(int lim) {
	uniform_int_distribution<int> uid(0, lim - 1);
	return uid(rang);
}

#define db(...) ZZ(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1> void ZZ(const char* name, Arg1&& arg1) {std::cerr << name << " = " << arg1 << endl;}
template <typename Arg1, typename... Args>void ZZ(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	std::cerr.write(names, comma - names) << " = " << arg1;
	ZZ(comma, args...);
}

// int mpow(int base, int exp) {
// 	base %= mod;
// 	int result = 1;
// 	while (exp > 0) {
// 		if (exp & 1) result = ((int)result * base) % mod;
// 		base = ((int)base * base) % mod;
// 		exp >>= 1;
// 	}
// 	return result;
// }

// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

void cpt() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	srand(chrono::high_resolution_clock::now().time_since_epoch().count());
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

void solve() {

	$2

}

int32_t main() {
	cpt();
	w(t) {
		solve();
	}
	return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cp_temp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
